Terminals unused in grammar

   TRUE
   FALSE
   BOOL
   NEWLINE
   WHITESPACE


Grammar

    0 $accept: start $end

    1 $@1: %empty

    2 $@2: %empty

    3 start: $@1 libraries $@2 declarations body_main

    4 libraries: libraries LIBRARY
    5          | %empty

    6 $@3: %empty

    7 $@4: %empty

    8 body_main: INT MAIN LB RB LP $@3 body $@4 RP

    9 declarations: declarations dclr
   10             | %empty

   11 dclr: var_dclr
   12     | func_def

   13 $@5: %empty

   14 $@6: %empty

   15 $@7: %empty

   16 func_def: type ID LB $@5 decl_plist RB LP $@6 body $@7 RP

   17 $@8: %empty

   18 $@9: %empty

   19 $@10: %empty

   20 func_def: VOID ID LB $@8 decl_plist RB LP $@9 body $@10 RP

   21 decl_plist: decl_pl
   22           | %empty

   23 decl_pl: decl_pl COMMA decl_param
   24        | decl_param

   25 decl_param: type ID

   26 var_dclr: type varl SEMICOL

   27 type: INT
   28     | FLOAT

   29 varl: ID
   30     | ID EQUALS arith_expr
   31     | varl COMMA ID EQUALS arith_expr
   32     | varl COMMA ID
   33     | ID dims
   34     | varl COMMA ID dims

   35 dims: LS INT_VALUE RS
   36     | dims LS INT_VALUE RS

   37 dims2: LS arith_expr RS
   38      | dims2 LS arith_expr RS

   39 body: stmt_list

   40 stmt_list: stmt_list stmt
   41          | %empty

   42 $@11: %empty

   43 $@12: %empty

   44 stmt: LP $@11 stmt_list $@12 RP
   45     | var_dclr
   46     | expr SEMICOL
   47     | CONTINUE SEMICOL
   48     | BREAK SEMICOL
   49     | return_stmt SEMICOL

   50 $@13: %empty

   51 $@14: %empty

   52 stmt: IF LB log_expr RB LP $@13 stmt_list RP $@14 else_stmt

   53 $@15: %empty

   54 $@16: %empty

   55 $@17: %empty

   56 stmt: WHILE LB $@15 log_expr RB $@16 LP $@17 stmt_list RP

   57 $@18: %empty

   58 $@19: %empty

   59 $@20: %empty

   60 stmt: FOR LB expr SEMICOL $@18 log_expr SEMICOL $@19 expr RB LP $@20 stmt_list RP

   61 $@21: %empty

   62 $@22: %empty

   63 stmt: SWITCH LB ID $@21 RB LP $@22 case_stmt default RP

   64 $@23: %empty

   65 $@24: %empty

   66 stmt: SWITCH LB ID dims2 $@23 RB LP $@24 case_stmt default RP

   67 $@25: %empty

   68 else_stmt: ELSE LP $@25 stmt_list RP
   69          | %empty

   70 $@26: %empty

   71 $@27: %empty

   72 case_stmt: case_stmt $@26 CASE INT_VALUE $@27 COLON stmt_list
   73          | %empty

   74 $@28: %empty

   75 default: DEFAULT $@28 COLON stmt_list
   76        | %empty

   77 return_stmt: RETURN
   78            | RETURN expr

   79 expr: arith_expr
   80     | log_expr
   81     | ID EQUALS arith_expr
   82     | ID dims2 EQUALS arith_expr

   83 $@29: %empty

   84 log_expr: and_expr $@29 log_expr_prime

   85 $@30: %empty

   86 log_expr_prime: OR and_expr $@30 log_expr_prime
   87               | %empty

   88 $@31: %empty

   89 and_expr: factor $@31 and_expr_prime

   90 $@32: %empty

   91 and_expr_prime: AND factor $@32 and_expr_prime
   92               | %empty

   93 factor: rel_expr
   94       | LB log_expr RB

   95 rel_expr: arith_expr op3 arith_expr

   96 arith_expr: arith_expr op1 expr1
   97           | expr1

   98 expr1: expr1 op2 term
   99      | term

  100 term: LB arith_expr RB
  101     | func_call
  102     | const
  103     | ID
  104     | ID dims2

  105 const: INT_VALUE
  106      | FLOAT_VAL

  107 op1: ADD
  108    | SUB

  109 op2: MUL
  110    | DIV
  111    | MOD

  112 op3: GT
  113    | LT
  114    | GE
  115    | LE
  116    | COMP
  117    | NEQ

  118 func_call: ID LB paramlist RB

  119 paramlist: plist
  120          | %empty

  121 plist: plist COMMA expr
  122      | expr


Terminals, with rules where they appear

$end (0) 0
error (256)
OR (258) 86
AND (259) 91
DEFAULT (260) 75
CASE (261) 72
COLON (262) 72 75
SWITCH (263) 63 66
SEMICOL (264) 26 46 47 48 49 60
EQUALS (265) 30 31 81 82
ADD (266) 107
SUB (267) 108
MUL (268) 109
DIV (269) 110
MOD (270) 111
GT (271) 112
LT (272) 113
GE (273) 114
LE (274) 115
COMP (275) 116
NEQ (276) 117
MAIN (277) 8
IF (278) 52
FOR (279) 60
WHILE (280) 56
ELSE (281) 68
INT (282) 8 27
FLOAT (283) 28
TRUE (284)
FALSE (285)
BOOL (286)
LP (287) 8 16 20 44 52 56 60 63 66 68
RP (288) 8 16 20 44 52 56 60 63 66 68
LS (289) 35 36 37 38
RS (290) 35 36 37 38
LB (291) 8 16 20 52 56 60 63 66 94 100 118
RB (292) 8 16 20 52 56 60 63 66 94 100 118
RETURN (293) 77 78
BREAK (294) 48
CONTINUE (295) 47
COMMA (296) 23 31 32 34 121
INT_VALUE (297) 35 36 72 105
FLOAT_VAL (298) 106
LIBRARY (299) 4
ID (300) 16 20 25 29 30 31 32 33 34 63 66 81 82 103 104 118
NEWLINE (301)
WHITESPACE (302)
VOID (303) 20


Nonterminals, with rules where they appear

$accept (49)
    on left: 0
start (50)
    on left: 3, on right: 0
$@1 (51)
    on left: 1, on right: 3
$@2 (52)
    on left: 2, on right: 3
libraries (53)
    on left: 4 5, on right: 3 4
body_main (54)
    on left: 8, on right: 3
$@3 (55)
    on left: 6, on right: 8
$@4 (56)
    on left: 7, on right: 8
declarations (57)
    on left: 9 10, on right: 3 9
dclr (58)
    on left: 11 12, on right: 9
func_def (59)
    on left: 16 20, on right: 12
$@5 (60)
    on left: 13, on right: 16
$@6 (61)
    on left: 14, on right: 16
$@7 (62)
    on left: 15, on right: 16
$@8 (63)
    on left: 17, on right: 20
$@9 (64)
    on left: 18, on right: 20
$@10 (65)
    on left: 19, on right: 20
decl_plist (66)
    on left: 21 22, on right: 16 20
decl_pl (67)
    on left: 23 24, on right: 21 23
decl_param (68)
    on left: 25, on right: 23 24
var_dclr (69)
    on left: 26, on right: 11 45
type (70)
    on left: 27 28, on right: 16 25 26
varl (71)
    on left: 29 30 31 32 33 34, on right: 26 31 32 34
dims (72)
    on left: 35 36, on right: 33 34 36
dims2 (73)
    on left: 37 38, on right: 38 66 82 104
body (74)
    on left: 39, on right: 8 16 20
stmt_list (75)
    on left: 40 41, on right: 39 40 44 52 56 60 68 72 75
stmt (76)
    on left: 44 45 46 47 48 49 52 56 60 63 66, on right: 40
$@11 (77)
    on left: 42, on right: 44
$@12 (78)
    on left: 43, on right: 44
$@13 (79)
    on left: 50, on right: 52
$@14 (80)
    on left: 51, on right: 52
$@15 (81)
    on left: 53, on right: 56
$@16 (82)
    on left: 54, on right: 56
$@17 (83)
    on left: 55, on right: 56
$@18 (84)
    on left: 57, on right: 60
$@19 (85)
    on left: 58, on right: 60
$@20 (86)
    on left: 59, on right: 60
$@21 (87)
    on left: 61, on right: 63
$@22 (88)
    on left: 62, on right: 63
$@23 (89)
    on left: 64, on right: 66
$@24 (90)
    on left: 65, on right: 66
else_stmt (91)
    on left: 68 69, on right: 52
$@25 (92)
    on left: 67, on right: 68
case_stmt (93)
    on left: 72 73, on right: 63 66 72
$@26 (94)
    on left: 70, on right: 72
$@27 (95)
    on left: 71, on right: 72
default (96)
    on left: 75 76, on right: 63 66
$@28 (97)
    on left: 74, on right: 75
return_stmt (98)
    on left: 77 78, on right: 49
expr (99)
    on left: 79 80 81 82, on right: 46 60 78 121 122
log_expr (100)
    on left: 84, on right: 52 56 60 80 94
$@29 (101)
    on left: 83, on right: 84
log_expr_prime (102)
    on left: 86 87, on right: 84 86
$@30 (103)
    on left: 85, on right: 86
and_expr (104)
    on left: 89, on right: 84 86
$@31 (105)
    on left: 88, on right: 89
and_expr_prime (106)
    on left: 91 92, on right: 89 91
$@32 (107)
    on left: 90, on right: 91
factor (108)
    on left: 93 94, on right: 89 91
rel_expr (109)
    on left: 95, on right: 93
arith_expr (110)
    on left: 96 97, on right: 30 31 37 38 79 81 82 95 96 100
expr1 (111)
    on left: 98 99, on right: 96 97 98
term (112)
    on left: 100 101 102 103 104, on right: 98 99
const (113)
    on left: 105 106, on right: 102
op1 (114)
    on left: 107 108, on right: 96
op2 (115)
    on left: 109 110 111, on right: 98
op3 (116)
    on left: 112 113 114 115 116 117, on right: 95
func_call (117)
    on left: 118, on right: 101
paramlist (118)
    on left: 119 120, on right: 118
plist (119)
    on left: 121 122, on right: 119 121


State 0

    0 $accept: . start $end

    $default  reduce using rule 1 ($@1)

    start  go to state 1
    $@1    go to state 2


State 1

    0 $accept: start . $end

    $end  shift, and go to state 3


State 2

    3 start: $@1 . libraries $@2 declarations body_main

    $default  reduce using rule 5 (libraries)

    libraries  go to state 4


State 3

    0 $accept: start $end .

    $default  accept


State 4

    3 start: $@1 libraries . $@2 declarations body_main
    4 libraries: libraries . LIBRARY

    LIBRARY  shift, and go to state 5

    $default  reduce using rule 2 ($@2)

    $@2  go to state 6


State 5

    4 libraries: libraries LIBRARY .

    $default  reduce using rule 4 (libraries)


State 6

    3 start: $@1 libraries $@2 . declarations body_main

    $default  reduce using rule 10 (declarations)

    declarations  go to state 7


State 7

    3 start: $@1 libraries $@2 declarations . body_main
    9 declarations: declarations . dclr

    INT    shift, and go to state 8
    FLOAT  shift, and go to state 9
    VOID   shift, and go to state 10

    body_main  go to state 11
    dclr       go to state 12
    func_def   go to state 13
    var_dclr   go to state 14
    type       go to state 15


State 8

    8 body_main: INT . MAIN LB RB LP $@3 body $@4 RP
   27 type: INT .

    MAIN  shift, and go to state 16

    $default  reduce using rule 27 (type)


State 9

   28 type: FLOAT .

    $default  reduce using rule 28 (type)


State 10

   20 func_def: VOID . ID LB $@8 decl_plist RB LP $@9 body $@10 RP

    ID  shift, and go to state 17


State 11

    3 start: $@1 libraries $@2 declarations body_main .

    $default  reduce using rule 3 (start)


State 12

    9 declarations: declarations dclr .

    $default  reduce using rule 9 (declarations)


State 13

   12 dclr: func_def .

    $default  reduce using rule 12 (dclr)


State 14

   11 dclr: var_dclr .

    $default  reduce using rule 11 (dclr)


State 15

   16 func_def: type . ID LB $@5 decl_plist RB LP $@6 body $@7 RP
   26 var_dclr: type . varl SEMICOL

    ID  shift, and go to state 18

    varl  go to state 19


State 16

    8 body_main: INT MAIN . LB RB LP $@3 body $@4 RP

    LB  shift, and go to state 20


State 17

   20 func_def: VOID ID . LB $@8 decl_plist RB LP $@9 body $@10 RP

    LB  shift, and go to state 21


State 18

   16 func_def: type ID . LB $@5 decl_plist RB LP $@6 body $@7 RP
   29 varl: ID .
   30     | ID . EQUALS arith_expr
   33     | ID . dims

    EQUALS  shift, and go to state 22
    LS      shift, and go to state 23
    LB      shift, and go to state 24

    $default  reduce using rule 29 (varl)

    dims  go to state 25


State 19

   26 var_dclr: type varl . SEMICOL
   31 varl: varl . COMMA ID EQUALS arith_expr
   32     | varl . COMMA ID
   34     | varl . COMMA ID dims

    SEMICOL  shift, and go to state 26
    COMMA    shift, and go to state 27


State 20

    8 body_main: INT MAIN LB . RB LP $@3 body $@4 RP

    RB  shift, and go to state 28


State 21

   20 func_def: VOID ID LB . $@8 decl_plist RB LP $@9 body $@10 RP

    $default  reduce using rule 17 ($@8)

    $@8  go to state 29


State 22

   30 varl: ID EQUALS . arith_expr

    LB         shift, and go to state 30
    INT_VALUE  shift, and go to state 31
    FLOAT_VAL  shift, and go to state 32
    ID         shift, and go to state 33

    arith_expr  go to state 34
    expr1       go to state 35
    term        go to state 36
    const       go to state 37
    func_call   go to state 38


State 23

   35 dims: LS . INT_VALUE RS

    INT_VALUE  shift, and go to state 39


State 24

   16 func_def: type ID LB . $@5 decl_plist RB LP $@6 body $@7 RP

    $default  reduce using rule 13 ($@5)

    $@5  go to state 40


State 25

   33 varl: ID dims .
   36 dims: dims . LS INT_VALUE RS

    LS  shift, and go to state 41

    $default  reduce using rule 33 (varl)


State 26

   26 var_dclr: type varl SEMICOL .

    $default  reduce using rule 26 (var_dclr)


State 27

   31 varl: varl COMMA . ID EQUALS arith_expr
   32     | varl COMMA . ID
   34     | varl COMMA . ID dims

    ID  shift, and go to state 42


State 28

    8 body_main: INT MAIN LB RB . LP $@3 body $@4 RP

    LP  shift, and go to state 43


State 29

   20 func_def: VOID ID LB $@8 . decl_plist RB LP $@9 body $@10 RP

    INT    shift, and go to state 44
    FLOAT  shift, and go to state 9

    $default  reduce using rule 22 (decl_plist)

    decl_plist  go to state 45
    decl_pl     go to state 46
    decl_param  go to state 47
    type        go to state 48


State 30

  100 term: LB . arith_expr RB

    LB         shift, and go to state 30
    INT_VALUE  shift, and go to state 31
    FLOAT_VAL  shift, and go to state 32
    ID         shift, and go to state 33

    arith_expr  go to state 49
    expr1       go to state 35
    term        go to state 36
    const       go to state 37
    func_call   go to state 38


State 31

  105 const: INT_VALUE .

    $default  reduce using rule 105 (const)


State 32

  106 const: FLOAT_VAL .

    $default  reduce using rule 106 (const)


State 33

  103 term: ID .
  104     | ID . dims2
  118 func_call: ID . LB paramlist RB

    LS  shift, and go to state 50
    LB  shift, and go to state 51

    $default  reduce using rule 103 (term)

    dims2  go to state 52


State 34

   30 varl: ID EQUALS arith_expr .
   96 arith_expr: arith_expr . op1 expr1

    ADD  shift, and go to state 53
    SUB  shift, and go to state 54

    $default  reduce using rule 30 (varl)

    op1  go to state 55


State 35

   97 arith_expr: expr1 .
   98 expr1: expr1 . op2 term

    MUL  shift, and go to state 56
    DIV  shift, and go to state 57
    MOD  shift, and go to state 58

    $default  reduce using rule 97 (arith_expr)

    op2  go to state 59


State 36

   99 expr1: term .

    $default  reduce using rule 99 (expr1)


State 37

  102 term: const .

    $default  reduce using rule 102 (term)


State 38

  101 term: func_call .

    $default  reduce using rule 101 (term)


State 39

   35 dims: LS INT_VALUE . RS

    RS  shift, and go to state 60


State 40

   16 func_def: type ID LB $@5 . decl_plist RB LP $@6 body $@7 RP

    INT    shift, and go to state 44
    FLOAT  shift, and go to state 9

    $default  reduce using rule 22 (decl_plist)

    decl_plist  go to state 61
    decl_pl     go to state 46
    decl_param  go to state 47
    type        go to state 48


State 41

   36 dims: dims LS . INT_VALUE RS

    INT_VALUE  shift, and go to state 62


State 42

   31 varl: varl COMMA ID . EQUALS arith_expr
   32     | varl COMMA ID .
   34     | varl COMMA ID . dims

    EQUALS  shift, and go to state 63
    LS      shift, and go to state 23

    $default  reduce using rule 32 (varl)

    dims  go to state 64


State 43

    8 body_main: INT MAIN LB RB LP . $@3 body $@4 RP

    $default  reduce using rule 6 ($@3)

    $@3  go to state 65


State 44

   27 type: INT .

    $default  reduce using rule 27 (type)


State 45

   20 func_def: VOID ID LB $@8 decl_plist . RB LP $@9 body $@10 RP

    RB  shift, and go to state 66


State 46

   21 decl_plist: decl_pl .
   23 decl_pl: decl_pl . COMMA decl_param

    COMMA  shift, and go to state 67

    $default  reduce using rule 21 (decl_plist)


State 47

   24 decl_pl: decl_param .

    $default  reduce using rule 24 (decl_pl)


State 48

   25 decl_param: type . ID

    ID  shift, and go to state 68


State 49

   96 arith_expr: arith_expr . op1 expr1
  100 term: LB arith_expr . RB

    ADD  shift, and go to state 53
    SUB  shift, and go to state 54
    RB   shift, and go to state 69

    op1  go to state 55


State 50

   37 dims2: LS . arith_expr RS

    LB         shift, and go to state 30
    INT_VALUE  shift, and go to state 31
    FLOAT_VAL  shift, and go to state 32
    ID         shift, and go to state 33

    arith_expr  go to state 70
    expr1       go to state 35
    term        go to state 36
    const       go to state 37
    func_call   go to state 38


State 51

  118 func_call: ID LB . paramlist RB

    LB         shift, and go to state 71
    INT_VALUE  shift, and go to state 31
    FLOAT_VAL  shift, and go to state 32
    ID         shift, and go to state 72

    $default  reduce using rule 120 (paramlist)

    expr        go to state 73
    log_expr    go to state 74
    and_expr    go to state 75
    factor      go to state 76
    rel_expr    go to state 77
    arith_expr  go to state 78
    expr1       go to state 35
    term        go to state 36
    const       go to state 37
    func_call   go to state 38
    paramlist   go to state 79
    plist       go to state 80


State 52

   38 dims2: dims2 . LS arith_expr RS
  104 term: ID dims2 .

    LS  shift, and go to state 81

    $default  reduce using rule 104 (term)


State 53

  107 op1: ADD .

    $default  reduce using rule 107 (op1)


State 54

  108 op1: SUB .

    $default  reduce using rule 108 (op1)


State 55

   96 arith_expr: arith_expr op1 . expr1

    LB         shift, and go to state 30
    INT_VALUE  shift, and go to state 31
    FLOAT_VAL  shift, and go to state 32
    ID         shift, and go to state 33

    expr1      go to state 82
    term       go to state 36
    const      go to state 37
    func_call  go to state 38


State 56

  109 op2: MUL .

    $default  reduce using rule 109 (op2)


State 57

  110 op2: DIV .

    $default  reduce using rule 110 (op2)


State 58

  111 op2: MOD .

    $default  reduce using rule 111 (op2)


State 59

   98 expr1: expr1 op2 . term

    LB         shift, and go to state 30
    INT_VALUE  shift, and go to state 31
    FLOAT_VAL  shift, and go to state 32
    ID         shift, and go to state 33

    term       go to state 83
    const      go to state 37
    func_call  go to state 38


State 60

   35 dims: LS INT_VALUE RS .

    $default  reduce using rule 35 (dims)


State 61

   16 func_def: type ID LB $@5 decl_plist . RB LP $@6 body $@7 RP

    RB  shift, and go to state 84


State 62

   36 dims: dims LS INT_VALUE . RS

    RS  shift, and go to state 85


State 63

   31 varl: varl COMMA ID EQUALS . arith_expr

    LB         shift, and go to state 30
    INT_VALUE  shift, and go to state 31
    FLOAT_VAL  shift, and go to state 32
    ID         shift, and go to state 33

    arith_expr  go to state 86
    expr1       go to state 35
    term        go to state 36
    const       go to state 37
    func_call   go to state 38


State 64

   34 varl: varl COMMA ID dims .
   36 dims: dims . LS INT_VALUE RS

    LS  shift, and go to state 41

    $default  reduce using rule 34 (varl)


State 65

    8 body_main: INT MAIN LB RB LP $@3 . body $@4 RP

    $default  reduce using rule 41 (stmt_list)

    body       go to state 87
    stmt_list  go to state 88


State 66

   20 func_def: VOID ID LB $@8 decl_plist RB . LP $@9 body $@10 RP

    LP  shift, and go to state 89


State 67

   23 decl_pl: decl_pl COMMA . decl_param

    INT    shift, and go to state 44
    FLOAT  shift, and go to state 9

    decl_param  go to state 90
    type        go to state 48


State 68

   25 decl_param: type ID .

    $default  reduce using rule 25 (decl_param)


State 69

  100 term: LB arith_expr RB .

    $default  reduce using rule 100 (term)


State 70

   37 dims2: LS arith_expr . RS
   96 arith_expr: arith_expr . op1 expr1

    ADD  shift, and go to state 53
    SUB  shift, and go to state 54
    RS   shift, and go to state 91

    op1  go to state 55


State 71

   94 factor: LB . log_expr RB
  100 term: LB . arith_expr RB

    LB         shift, and go to state 71
    INT_VALUE  shift, and go to state 31
    FLOAT_VAL  shift, and go to state 32
    ID         shift, and go to state 33

    log_expr    go to state 92
    and_expr    go to state 75
    factor      go to state 76
    rel_expr    go to state 77
    arith_expr  go to state 93
    expr1       go to state 35
    term        go to state 36
    const       go to state 37
    func_call   go to state 38


State 72

   81 expr: ID . EQUALS arith_expr
   82     | ID . dims2 EQUALS arith_expr
  103 term: ID .
  104     | ID . dims2
  118 func_call: ID . LB paramlist RB

    EQUALS  shift, and go to state 94
    LS      shift, and go to state 50
    LB      shift, and go to state 51

    $default  reduce using rule 103 (term)

    dims2  go to state 95


State 73

  122 plist: expr .

    $default  reduce using rule 122 (plist)


State 74

   80 expr: log_expr .

    $default  reduce using rule 80 (expr)


State 75

   84 log_expr: and_expr . $@29 log_expr_prime

    $default  reduce using rule 83 ($@29)

    $@29  go to state 96


State 76

   89 and_expr: factor . $@31 and_expr_prime

    $default  reduce using rule 88 ($@31)

    $@31  go to state 97


State 77

   93 factor: rel_expr .

    $default  reduce using rule 93 (factor)


State 78

   79 expr: arith_expr .
   95 rel_expr: arith_expr . op3 arith_expr
   96 arith_expr: arith_expr . op1 expr1

    ADD   shift, and go to state 53
    SUB   shift, and go to state 54
    GT    shift, and go to state 98
    LT    shift, and go to state 99
    GE    shift, and go to state 100
    LE    shift, and go to state 101
    COMP  shift, and go to state 102
    NEQ   shift, and go to state 103

    $default  reduce using rule 79 (expr)

    op1  go to state 55
    op3  go to state 104


State 79

  118 func_call: ID LB paramlist . RB

    RB  shift, and go to state 105


State 80

  119 paramlist: plist .
  121 plist: plist . COMMA expr

    COMMA  shift, and go to state 106

    $default  reduce using rule 119 (paramlist)


State 81

   38 dims2: dims2 LS . arith_expr RS

    LB         shift, and go to state 30
    INT_VALUE  shift, and go to state 31
    FLOAT_VAL  shift, and go to state 32
    ID         shift, and go to state 33

    arith_expr  go to state 107
    expr1       go to state 35
    term        go to state 36
    const       go to state 37
    func_call   go to state 38


State 82

   96 arith_expr: arith_expr op1 expr1 .
   98 expr1: expr1 . op2 term

    MUL  shift, and go to state 56
    DIV  shift, and go to state 57
    MOD  shift, and go to state 58

    $default  reduce using rule 96 (arith_expr)

    op2  go to state 59


State 83

   98 expr1: expr1 op2 term .

    $default  reduce using rule 98 (expr1)


State 84

   16 func_def: type ID LB $@5 decl_plist RB . LP $@6 body $@7 RP

    LP  shift, and go to state 108


State 85

   36 dims: dims LS INT_VALUE RS .

    $default  reduce using rule 36 (dims)


State 86

   31 varl: varl COMMA ID EQUALS arith_expr .
   96 arith_expr: arith_expr . op1 expr1

    ADD  shift, and go to state 53
    SUB  shift, and go to state 54

    $default  reduce using rule 31 (varl)

    op1  go to state 55


State 87

    8 body_main: INT MAIN LB RB LP $@3 body . $@4 RP

    $default  reduce using rule 7 ($@4)

    $@4  go to state 109


State 88

   39 body: stmt_list .
   40 stmt_list: stmt_list . stmt

    SWITCH     shift, and go to state 110
    IF         shift, and go to state 111
    FOR        shift, and go to state 112
    WHILE      shift, and go to state 113
    INT        shift, and go to state 44
    FLOAT      shift, and go to state 9
    LP         shift, and go to state 114
    LB         shift, and go to state 71
    RETURN     shift, and go to state 115
    BREAK      shift, and go to state 116
    CONTINUE   shift, and go to state 117
    INT_VALUE  shift, and go to state 31
    FLOAT_VAL  shift, and go to state 32
    ID         shift, and go to state 72

    $default  reduce using rule 39 (body)

    var_dclr     go to state 118
    type         go to state 119
    stmt         go to state 120
    return_stmt  go to state 121
    expr         go to state 122
    log_expr     go to state 74
    and_expr     go to state 75
    factor       go to state 76
    rel_expr     go to state 77
    arith_expr   go to state 78
    expr1        go to state 35
    term         go to state 36
    const        go to state 37
    func_call    go to state 38


State 89

   20 func_def: VOID ID LB $@8 decl_plist RB LP . $@9 body $@10 RP

    $default  reduce using rule 18 ($@9)

    $@9  go to state 123


State 90

   23 decl_pl: decl_pl COMMA decl_param .

    $default  reduce using rule 23 (decl_pl)


State 91

   37 dims2: LS arith_expr RS .

    $default  reduce using rule 37 (dims2)


State 92

   94 factor: LB log_expr . RB

    RB  shift, and go to state 124


State 93

   95 rel_expr: arith_expr . op3 arith_expr
   96 arith_expr: arith_expr . op1 expr1
  100 term: LB arith_expr . RB

    ADD   shift, and go to state 53
    SUB   shift, and go to state 54
    GT    shift, and go to state 98
    LT    shift, and go to state 99
    GE    shift, and go to state 100
    LE    shift, and go to state 101
    COMP  shift, and go to state 102
    NEQ   shift, and go to state 103
    RB    shift, and go to state 69

    op1  go to state 55
    op3  go to state 104


State 94

   81 expr: ID EQUALS . arith_expr

    LB         shift, and go to state 30
    INT_VALUE  shift, and go to state 31
    FLOAT_VAL  shift, and go to state 32
    ID         shift, and go to state 33

    arith_expr  go to state 125
    expr1       go to state 35
    term        go to state 36
    const       go to state 37
    func_call   go to state 38


State 95

   38 dims2: dims2 . LS arith_expr RS
   82 expr: ID dims2 . EQUALS arith_expr
  104 term: ID dims2 .

    EQUALS  shift, and go to state 126
    LS      shift, and go to state 81

    $default  reduce using rule 104 (term)


State 96

   84 log_expr: and_expr $@29 . log_expr_prime

    OR  shift, and go to state 127

    $default  reduce using rule 87 (log_expr_prime)

    log_expr_prime  go to state 128


State 97

   89 and_expr: factor $@31 . and_expr_prime

    AND  shift, and go to state 129

    $default  reduce using rule 92 (and_expr_prime)

    and_expr_prime  go to state 130


State 98

  112 op3: GT .

    $default  reduce using rule 112 (op3)


State 99

  113 op3: LT .

    $default  reduce using rule 113 (op3)


State 100

  114 op3: GE .

    $default  reduce using rule 114 (op3)


State 101

  115 op3: LE .

    $default  reduce using rule 115 (op3)


State 102

  116 op3: COMP .

    $default  reduce using rule 116 (op3)


State 103

  117 op3: NEQ .

    $default  reduce using rule 117 (op3)


State 104

   95 rel_expr: arith_expr op3 . arith_expr

    LB         shift, and go to state 30
    INT_VALUE  shift, and go to state 31
    FLOAT_VAL  shift, and go to state 32
    ID         shift, and go to state 33

    arith_expr  go to state 131
    expr1       go to state 35
    term        go to state 36
    const       go to state 37
    func_call   go to state 38


State 105

  118 func_call: ID LB paramlist RB .

    $default  reduce using rule 118 (func_call)


State 106

  121 plist: plist COMMA . expr

    LB         shift, and go to state 71
    INT_VALUE  shift, and go to state 31
    FLOAT_VAL  shift, and go to state 32
    ID         shift, and go to state 72

    expr        go to state 132
    log_expr    go to state 74
    and_expr    go to state 75
    factor      go to state 76
    rel_expr    go to state 77
    arith_expr  go to state 78
    expr1       go to state 35
    term        go to state 36
    const       go to state 37
    func_call   go to state 38


State 107

   38 dims2: dims2 LS arith_expr . RS
   96 arith_expr: arith_expr . op1 expr1

    ADD  shift, and go to state 53
    SUB  shift, and go to state 54
    RS   shift, and go to state 133

    op1  go to state 55


State 108

   16 func_def: type ID LB $@5 decl_plist RB LP . $@6 body $@7 RP

    $default  reduce using rule 14 ($@6)

    $@6  go to state 134


State 109

    8 body_main: INT MAIN LB RB LP $@3 body $@4 . RP

    RP  shift, and go to state 135


State 110

   63 stmt: SWITCH . LB ID $@21 RB LP $@22 case_stmt default RP
   66     | SWITCH . LB ID dims2 $@23 RB LP $@24 case_stmt default RP

    LB  shift, and go to state 136


State 111

   52 stmt: IF . LB log_expr RB LP $@13 stmt_list RP $@14 else_stmt

    LB  shift, and go to state 137


State 112

   60 stmt: FOR . LB expr SEMICOL $@18 log_expr SEMICOL $@19 expr RB LP $@20 stmt_list RP

    LB  shift, and go to state 138


State 113

   56 stmt: WHILE . LB $@15 log_expr RB $@16 LP $@17 stmt_list RP

    LB  shift, and go to state 139


State 114

   44 stmt: LP . $@11 stmt_list $@12 RP

    $default  reduce using rule 42 ($@11)

    $@11  go to state 140


State 115

   77 return_stmt: RETURN .
   78            | RETURN . expr

    LB         shift, and go to state 71
    INT_VALUE  shift, and go to state 31
    FLOAT_VAL  shift, and go to state 32
    ID         shift, and go to state 72

    $default  reduce using rule 77 (return_stmt)

    expr        go to state 141
    log_expr    go to state 74
    and_expr    go to state 75
    factor      go to state 76
    rel_expr    go to state 77
    arith_expr  go to state 78
    expr1       go to state 35
    term        go to state 36
    const       go to state 37
    func_call   go to state 38


State 116

   48 stmt: BREAK . SEMICOL

    SEMICOL  shift, and go to state 142


State 117

   47 stmt: CONTINUE . SEMICOL

    SEMICOL  shift, and go to state 143


State 118

   45 stmt: var_dclr .

    $default  reduce using rule 45 (stmt)


State 119

   26 var_dclr: type . varl SEMICOL

    ID  shift, and go to state 144

    varl  go to state 19


State 120

   40 stmt_list: stmt_list stmt .

    $default  reduce using rule 40 (stmt_list)


State 121

   49 stmt: return_stmt . SEMICOL

    SEMICOL  shift, and go to state 145


State 122

   46 stmt: expr . SEMICOL

    SEMICOL  shift, and go to state 146


State 123

   20 func_def: VOID ID LB $@8 decl_plist RB LP $@9 . body $@10 RP

    $default  reduce using rule 41 (stmt_list)

    body       go to state 147
    stmt_list  go to state 88


State 124

   94 factor: LB log_expr RB .

    $default  reduce using rule 94 (factor)


State 125

   81 expr: ID EQUALS arith_expr .
   96 arith_expr: arith_expr . op1 expr1

    ADD  shift, and go to state 53
    SUB  shift, and go to state 54

    $default  reduce using rule 81 (expr)

    op1  go to state 55


State 126

   82 expr: ID dims2 EQUALS . arith_expr

    LB         shift, and go to state 30
    INT_VALUE  shift, and go to state 31
    FLOAT_VAL  shift, and go to state 32
    ID         shift, and go to state 33

    arith_expr  go to state 148
    expr1       go to state 35
    term        go to state 36
    const       go to state 37
    func_call   go to state 38


State 127

   86 log_expr_prime: OR . and_expr $@30 log_expr_prime

    LB         shift, and go to state 71
    INT_VALUE  shift, and go to state 31
    FLOAT_VAL  shift, and go to state 32
    ID         shift, and go to state 33

    and_expr    go to state 149
    factor      go to state 76
    rel_expr    go to state 77
    arith_expr  go to state 150
    expr1       go to state 35
    term        go to state 36
    const       go to state 37
    func_call   go to state 38


State 128

   84 log_expr: and_expr $@29 log_expr_prime .

    $default  reduce using rule 84 (log_expr)


State 129

   91 and_expr_prime: AND . factor $@32 and_expr_prime

    LB         shift, and go to state 71
    INT_VALUE  shift, and go to state 31
    FLOAT_VAL  shift, and go to state 32
    ID         shift, and go to state 33

    factor      go to state 151
    rel_expr    go to state 77
    arith_expr  go to state 150
    expr1       go to state 35
    term        go to state 36
    const       go to state 37
    func_call   go to state 38


State 130

   89 and_expr: factor $@31 and_expr_prime .

    $default  reduce using rule 89 (and_expr)


State 131

   95 rel_expr: arith_expr op3 arith_expr .
   96 arith_expr: arith_expr . op1 expr1

    ADD  shift, and go to state 53
    SUB  shift, and go to state 54

    $default  reduce using rule 95 (rel_expr)

    op1  go to state 55


State 132

  121 plist: plist COMMA expr .

    $default  reduce using rule 121 (plist)


State 133

   38 dims2: dims2 LS arith_expr RS .

    $default  reduce using rule 38 (dims2)


State 134

   16 func_def: type ID LB $@5 decl_plist RB LP $@6 . body $@7 RP

    $default  reduce using rule 41 (stmt_list)

    body       go to state 152
    stmt_list  go to state 88


State 135

    8 body_main: INT MAIN LB RB LP $@3 body $@4 RP .

    $default  reduce using rule 8 (body_main)


State 136

   63 stmt: SWITCH LB . ID $@21 RB LP $@22 case_stmt default RP
   66     | SWITCH LB . ID dims2 $@23 RB LP $@24 case_stmt default RP

    ID  shift, and go to state 153


State 137

   52 stmt: IF LB . log_expr RB LP $@13 stmt_list RP $@14 else_stmt

    LB         shift, and go to state 71
    INT_VALUE  shift, and go to state 31
    FLOAT_VAL  shift, and go to state 32
    ID         shift, and go to state 33

    log_expr    go to state 154
    and_expr    go to state 75
    factor      go to state 76
    rel_expr    go to state 77
    arith_expr  go to state 150
    expr1       go to state 35
    term        go to state 36
    const       go to state 37
    func_call   go to state 38


State 138

   60 stmt: FOR LB . expr SEMICOL $@18 log_expr SEMICOL $@19 expr RB LP $@20 stmt_list RP

    LB         shift, and go to state 71
    INT_VALUE  shift, and go to state 31
    FLOAT_VAL  shift, and go to state 32
    ID         shift, and go to state 72

    expr        go to state 155
    log_expr    go to state 74
    and_expr    go to state 75
    factor      go to state 76
    rel_expr    go to state 77
    arith_expr  go to state 78
    expr1       go to state 35
    term        go to state 36
    const       go to state 37
    func_call   go to state 38


State 139

   56 stmt: WHILE LB . $@15 log_expr RB $@16 LP $@17 stmt_list RP

    $default  reduce using rule 53 ($@15)

    $@15  go to state 156


State 140

   44 stmt: LP $@11 . stmt_list $@12 RP

    $default  reduce using rule 41 (stmt_list)

    stmt_list  go to state 157


State 141

   78 return_stmt: RETURN expr .

    $default  reduce using rule 78 (return_stmt)


State 142

   48 stmt: BREAK SEMICOL .

    $default  reduce using rule 48 (stmt)


State 143

   47 stmt: CONTINUE SEMICOL .

    $default  reduce using rule 47 (stmt)


State 144

   29 varl: ID .
   30     | ID . EQUALS arith_expr
   33     | ID . dims

    EQUALS  shift, and go to state 22
    LS      shift, and go to state 23

    $default  reduce using rule 29 (varl)

    dims  go to state 25


State 145

   49 stmt: return_stmt SEMICOL .

    $default  reduce using rule 49 (stmt)


State 146

   46 stmt: expr SEMICOL .

    $default  reduce using rule 46 (stmt)


State 147

   20 func_def: VOID ID LB $@8 decl_plist RB LP $@9 body . $@10 RP

    $default  reduce using rule 19 ($@10)

    $@10  go to state 158


State 148

   82 expr: ID dims2 EQUALS arith_expr .
   96 arith_expr: arith_expr . op1 expr1

    ADD  shift, and go to state 53
    SUB  shift, and go to state 54

    $default  reduce using rule 82 (expr)

    op1  go to state 55


State 149

   86 log_expr_prime: OR and_expr . $@30 log_expr_prime

    $default  reduce using rule 85 ($@30)

    $@30  go to state 159


State 150

   95 rel_expr: arith_expr . op3 arith_expr
   96 arith_expr: arith_expr . op1 expr1

    ADD   shift, and go to state 53
    SUB   shift, and go to state 54
    GT    shift, and go to state 98
    LT    shift, and go to state 99
    GE    shift, and go to state 100
    LE    shift, and go to state 101
    COMP  shift, and go to state 102
    NEQ   shift, and go to state 103

    op1  go to state 55
    op3  go to state 104


State 151

   91 and_expr_prime: AND factor . $@32 and_expr_prime

    $default  reduce using rule 90 ($@32)

    $@32  go to state 160


State 152

   16 func_def: type ID LB $@5 decl_plist RB LP $@6 body . $@7 RP

    $default  reduce using rule 15 ($@7)

    $@7  go to state 161


State 153

   63 stmt: SWITCH LB ID . $@21 RB LP $@22 case_stmt default RP
   66     | SWITCH LB ID . dims2 $@23 RB LP $@24 case_stmt default RP

    LS  shift, and go to state 50

    $default  reduce using rule 61 ($@21)

    dims2  go to state 162
    $@21   go to state 163


State 154

   52 stmt: IF LB log_expr . RB LP $@13 stmt_list RP $@14 else_stmt

    RB  shift, and go to state 164


State 155

   60 stmt: FOR LB expr . SEMICOL $@18 log_expr SEMICOL $@19 expr RB LP $@20 stmt_list RP

    SEMICOL  shift, and go to state 165


State 156

   56 stmt: WHILE LB $@15 . log_expr RB $@16 LP $@17 stmt_list RP

    LB         shift, and go to state 71
    INT_VALUE  shift, and go to state 31
    FLOAT_VAL  shift, and go to state 32
    ID         shift, and go to state 33

    log_expr    go to state 166
    and_expr    go to state 75
    factor      go to state 76
    rel_expr    go to state 77
    arith_expr  go to state 150
    expr1       go to state 35
    term        go to state 36
    const       go to state 37
    func_call   go to state 38


State 157

   40 stmt_list: stmt_list . stmt
   44 stmt: LP $@11 stmt_list . $@12 RP

    SWITCH     shift, and go to state 110
    IF         shift, and go to state 111
    FOR        shift, and go to state 112
    WHILE      shift, and go to state 113
    INT        shift, and go to state 44
    FLOAT      shift, and go to state 9
    LP         shift, and go to state 114
    LB         shift, and go to state 71
    RETURN     shift, and go to state 115
    BREAK      shift, and go to state 116
    CONTINUE   shift, and go to state 117
    INT_VALUE  shift, and go to state 31
    FLOAT_VAL  shift, and go to state 32
    ID         shift, and go to state 72

    $default  reduce using rule 43 ($@12)

    var_dclr     go to state 118
    type         go to state 119
    stmt         go to state 120
    $@12         go to state 167
    return_stmt  go to state 121
    expr         go to state 122
    log_expr     go to state 74
    and_expr     go to state 75
    factor       go to state 76
    rel_expr     go to state 77
    arith_expr   go to state 78
    expr1        go to state 35
    term         go to state 36
    const        go to state 37
    func_call    go to state 38


State 158

   20 func_def: VOID ID LB $@8 decl_plist RB LP $@9 body $@10 . RP

    RP  shift, and go to state 168


State 159

   86 log_expr_prime: OR and_expr $@30 . log_expr_prime

    OR  shift, and go to state 127

    $default  reduce using rule 87 (log_expr_prime)

    log_expr_prime  go to state 169


State 160

   91 and_expr_prime: AND factor $@32 . and_expr_prime

    AND  shift, and go to state 129

    $default  reduce using rule 92 (and_expr_prime)

    and_expr_prime  go to state 170


State 161

   16 func_def: type ID LB $@5 decl_plist RB LP $@6 body $@7 . RP

    RP  shift, and go to state 171


State 162

   38 dims2: dims2 . LS arith_expr RS
   66 stmt: SWITCH LB ID dims2 . $@23 RB LP $@24 case_stmt default RP

    LS  shift, and go to state 81

    $default  reduce using rule 64 ($@23)

    $@23  go to state 172


State 163

   63 stmt: SWITCH LB ID $@21 . RB LP $@22 case_stmt default RP

    RB  shift, and go to state 173


State 164

   52 stmt: IF LB log_expr RB . LP $@13 stmt_list RP $@14 else_stmt

    LP  shift, and go to state 174


State 165

   60 stmt: FOR LB expr SEMICOL . $@18 log_expr SEMICOL $@19 expr RB LP $@20 stmt_list RP

    $default  reduce using rule 57 ($@18)

    $@18  go to state 175


State 166

   56 stmt: WHILE LB $@15 log_expr . RB $@16 LP $@17 stmt_list RP

    RB  shift, and go to state 176


State 167

   44 stmt: LP $@11 stmt_list $@12 . RP

    RP  shift, and go to state 177


State 168

   20 func_def: VOID ID LB $@8 decl_plist RB LP $@9 body $@10 RP .

    $default  reduce using rule 20 (func_def)


State 169

   86 log_expr_prime: OR and_expr $@30 log_expr_prime .

    $default  reduce using rule 86 (log_expr_prime)


State 170

   91 and_expr_prime: AND factor $@32 and_expr_prime .

    $default  reduce using rule 91 (and_expr_prime)


State 171

   16 func_def: type ID LB $@5 decl_plist RB LP $@6 body $@7 RP .

    $default  reduce using rule 16 (func_def)


State 172

   66 stmt: SWITCH LB ID dims2 $@23 . RB LP $@24 case_stmt default RP

    RB  shift, and go to state 178


State 173

   63 stmt: SWITCH LB ID $@21 RB . LP $@22 case_stmt default RP

    LP  shift, and go to state 179


State 174

   52 stmt: IF LB log_expr RB LP . $@13 stmt_list RP $@14 else_stmt

    $default  reduce using rule 50 ($@13)

    $@13  go to state 180


State 175

   60 stmt: FOR LB expr SEMICOL $@18 . log_expr SEMICOL $@19 expr RB LP $@20 stmt_list RP

    LB         shift, and go to state 71
    INT_VALUE  shift, and go to state 31
    FLOAT_VAL  shift, and go to state 32
    ID         shift, and go to state 33

    log_expr    go to state 181
    and_expr    go to state 75
    factor      go to state 76
    rel_expr    go to state 77
    arith_expr  go to state 150
    expr1       go to state 35
    term        go to state 36
    const       go to state 37
    func_call   go to state 38


State 176

   56 stmt: WHILE LB $@15 log_expr RB . $@16 LP $@17 stmt_list RP

    $default  reduce using rule 54 ($@16)

    $@16  go to state 182


State 177

   44 stmt: LP $@11 stmt_list $@12 RP .

    $default  reduce using rule 44 (stmt)


State 178

   66 stmt: SWITCH LB ID dims2 $@23 RB . LP $@24 case_stmt default RP

    LP  shift, and go to state 183


State 179

   63 stmt: SWITCH LB ID $@21 RB LP . $@22 case_stmt default RP

    $default  reduce using rule 62 ($@22)

    $@22  go to state 184


State 180

   52 stmt: IF LB log_expr RB LP $@13 . stmt_list RP $@14 else_stmt

    $default  reduce using rule 41 (stmt_list)

    stmt_list  go to state 185


State 181

   60 stmt: FOR LB expr SEMICOL $@18 log_expr . SEMICOL $@19 expr RB LP $@20 stmt_list RP

    SEMICOL  shift, and go to state 186


State 182

   56 stmt: WHILE LB $@15 log_expr RB $@16 . LP $@17 stmt_list RP

    LP  shift, and go to state 187


State 183

   66 stmt: SWITCH LB ID dims2 $@23 RB LP . $@24 case_stmt default RP

    $default  reduce using rule 65 ($@24)

    $@24  go to state 188


State 184

   63 stmt: SWITCH LB ID $@21 RB LP $@22 . case_stmt default RP

    $default  reduce using rule 73 (case_stmt)

    case_stmt  go to state 189


State 185

   40 stmt_list: stmt_list . stmt
   52 stmt: IF LB log_expr RB LP $@13 stmt_list . RP $@14 else_stmt

    SWITCH     shift, and go to state 110
    IF         shift, and go to state 111
    FOR        shift, and go to state 112
    WHILE      shift, and go to state 113
    INT        shift, and go to state 44
    FLOAT      shift, and go to state 9
    LP         shift, and go to state 114
    RP         shift, and go to state 190
    LB         shift, and go to state 71
    RETURN     shift, and go to state 115
    BREAK      shift, and go to state 116
    CONTINUE   shift, and go to state 117
    INT_VALUE  shift, and go to state 31
    FLOAT_VAL  shift, and go to state 32
    ID         shift, and go to state 72

    var_dclr     go to state 118
    type         go to state 119
    stmt         go to state 120
    return_stmt  go to state 121
    expr         go to state 122
    log_expr     go to state 74
    and_expr     go to state 75
    factor       go to state 76
    rel_expr     go to state 77
    arith_expr   go to state 78
    expr1        go to state 35
    term         go to state 36
    const        go to state 37
    func_call    go to state 38


State 186

   60 stmt: FOR LB expr SEMICOL $@18 log_expr SEMICOL . $@19 expr RB LP $@20 stmt_list RP

    $default  reduce using rule 58 ($@19)

    $@19  go to state 191


State 187

   56 stmt: WHILE LB $@15 log_expr RB $@16 LP . $@17 stmt_list RP

    $default  reduce using rule 55 ($@17)

    $@17  go to state 192


State 188

   66 stmt: SWITCH LB ID dims2 $@23 RB LP $@24 . case_stmt default RP

    $default  reduce using rule 73 (case_stmt)

    case_stmt  go to state 193


State 189

   63 stmt: SWITCH LB ID $@21 RB LP $@22 case_stmt . default RP
   72 case_stmt: case_stmt . $@26 CASE INT_VALUE $@27 COLON stmt_list

    DEFAULT  shift, and go to state 194

    RP        reduce using rule 76 (default)
    $default  reduce using rule 70 ($@26)

    $@26     go to state 195
    default  go to state 196


State 190

   52 stmt: IF LB log_expr RB LP $@13 stmt_list RP . $@14 else_stmt

    $default  reduce using rule 51 ($@14)

    $@14  go to state 197


State 191

   60 stmt: FOR LB expr SEMICOL $@18 log_expr SEMICOL $@19 . expr RB LP $@20 stmt_list RP

    LB         shift, and go to state 71
    INT_VALUE  shift, and go to state 31
    FLOAT_VAL  shift, and go to state 32
    ID         shift, and go to state 72

    expr        go to state 198
    log_expr    go to state 74
    and_expr    go to state 75
    factor      go to state 76
    rel_expr    go to state 77
    arith_expr  go to state 78
    expr1       go to state 35
    term        go to state 36
    const       go to state 37
    func_call   go to state 38


State 192

   56 stmt: WHILE LB $@15 log_expr RB $@16 LP $@17 . stmt_list RP

    $default  reduce using rule 41 (stmt_list)

    stmt_list  go to state 199


State 193

   66 stmt: SWITCH LB ID dims2 $@23 RB LP $@24 case_stmt . default RP
   72 case_stmt: case_stmt . $@26 CASE INT_VALUE $@27 COLON stmt_list

    DEFAULT  shift, and go to state 194

    RP        reduce using rule 76 (default)
    $default  reduce using rule 70 ($@26)

    $@26     go to state 195
    default  go to state 200


State 194

   75 default: DEFAULT . $@28 COLON stmt_list

    $default  reduce using rule 74 ($@28)

    $@28  go to state 201


State 195

   72 case_stmt: case_stmt $@26 . CASE INT_VALUE $@27 COLON stmt_list

    CASE  shift, and go to state 202


State 196

   63 stmt: SWITCH LB ID $@21 RB LP $@22 case_stmt default . RP

    RP  shift, and go to state 203


State 197

   52 stmt: IF LB log_expr RB LP $@13 stmt_list RP $@14 . else_stmt

    ELSE  shift, and go to state 204

    $default  reduce using rule 69 (else_stmt)

    else_stmt  go to state 205


State 198

   60 stmt: FOR LB expr SEMICOL $@18 log_expr SEMICOL $@19 expr . RB LP $@20 stmt_list RP

    RB  shift, and go to state 206


State 199

   40 stmt_list: stmt_list . stmt
   56 stmt: WHILE LB $@15 log_expr RB $@16 LP $@17 stmt_list . RP

    SWITCH     shift, and go to state 110
    IF         shift, and go to state 111
    FOR        shift, and go to state 112
    WHILE      shift, and go to state 113
    INT        shift, and go to state 44
    FLOAT      shift, and go to state 9
    LP         shift, and go to state 114
    RP         shift, and go to state 207
    LB         shift, and go to state 71
    RETURN     shift, and go to state 115
    BREAK      shift, and go to state 116
    CONTINUE   shift, and go to state 117
    INT_VALUE  shift, and go to state 31
    FLOAT_VAL  shift, and go to state 32
    ID         shift, and go to state 72

    var_dclr     go to state 118
    type         go to state 119
    stmt         go to state 120
    return_stmt  go to state 121
    expr         go to state 122
    log_expr     go to state 74
    and_expr     go to state 75
    factor       go to state 76
    rel_expr     go to state 77
    arith_expr   go to state 78
    expr1        go to state 35
    term         go to state 36
    const        go to state 37
    func_call    go to state 38


State 200

   66 stmt: SWITCH LB ID dims2 $@23 RB LP $@24 case_stmt default . RP

    RP  shift, and go to state 208


State 201

   75 default: DEFAULT $@28 . COLON stmt_list

    COLON  shift, and go to state 209


State 202

   72 case_stmt: case_stmt $@26 CASE . INT_VALUE $@27 COLON stmt_list

    INT_VALUE  shift, and go to state 210


State 203

   63 stmt: SWITCH LB ID $@21 RB LP $@22 case_stmt default RP .

    $default  reduce using rule 63 (stmt)


State 204

   68 else_stmt: ELSE . LP $@25 stmt_list RP

    LP  shift, and go to state 211


State 205

   52 stmt: IF LB log_expr RB LP $@13 stmt_list RP $@14 else_stmt .

    $default  reduce using rule 52 (stmt)


State 206

   60 stmt: FOR LB expr SEMICOL $@18 log_expr SEMICOL $@19 expr RB . LP $@20 stmt_list RP

    LP  shift, and go to state 212


State 207

   56 stmt: WHILE LB $@15 log_expr RB $@16 LP $@17 stmt_list RP .

    $default  reduce using rule 56 (stmt)


State 208

   66 stmt: SWITCH LB ID dims2 $@23 RB LP $@24 case_stmt default RP .

    $default  reduce using rule 66 (stmt)


State 209

   75 default: DEFAULT $@28 COLON . stmt_list

    $default  reduce using rule 41 (stmt_list)

    stmt_list  go to state 213


State 210

   72 case_stmt: case_stmt $@26 CASE INT_VALUE . $@27 COLON stmt_list

    $default  reduce using rule 71 ($@27)

    $@27  go to state 214


State 211

   68 else_stmt: ELSE LP . $@25 stmt_list RP

    $default  reduce using rule 67 ($@25)

    $@25  go to state 215


State 212

   60 stmt: FOR LB expr SEMICOL $@18 log_expr SEMICOL $@19 expr RB LP . $@20 stmt_list RP

    $default  reduce using rule 59 ($@20)

    $@20  go to state 216


State 213

   40 stmt_list: stmt_list . stmt
   75 default: DEFAULT $@28 COLON stmt_list .

    SWITCH     shift, and go to state 110
    IF         shift, and go to state 111
    FOR        shift, and go to state 112
    WHILE      shift, and go to state 113
    INT        shift, and go to state 44
    FLOAT      shift, and go to state 9
    LP         shift, and go to state 114
    LB         shift, and go to state 71
    RETURN     shift, and go to state 115
    BREAK      shift, and go to state 116
    CONTINUE   shift, and go to state 117
    INT_VALUE  shift, and go to state 31
    FLOAT_VAL  shift, and go to state 32
    ID         shift, and go to state 72

    $default  reduce using rule 75 (default)

    var_dclr     go to state 118
    type         go to state 119
    stmt         go to state 120
    return_stmt  go to state 121
    expr         go to state 122
    log_expr     go to state 74
    and_expr     go to state 75
    factor       go to state 76
    rel_expr     go to state 77
    arith_expr   go to state 78
    expr1        go to state 35
    term         go to state 36
    const        go to state 37
    func_call    go to state 38


State 214

   72 case_stmt: case_stmt $@26 CASE INT_VALUE $@27 . COLON stmt_list

    COLON  shift, and go to state 217


State 215

   68 else_stmt: ELSE LP $@25 . stmt_list RP

    $default  reduce using rule 41 (stmt_list)

    stmt_list  go to state 218


State 216

   60 stmt: FOR LB expr SEMICOL $@18 log_expr SEMICOL $@19 expr RB LP $@20 . stmt_list RP

    $default  reduce using rule 41 (stmt_list)

    stmt_list  go to state 219


State 217

   72 case_stmt: case_stmt $@26 CASE INT_VALUE $@27 COLON . stmt_list

    $default  reduce using rule 41 (stmt_list)

    stmt_list  go to state 220


State 218

   40 stmt_list: stmt_list . stmt
   68 else_stmt: ELSE LP $@25 stmt_list . RP

    SWITCH     shift, and go to state 110
    IF         shift, and go to state 111
    FOR        shift, and go to state 112
    WHILE      shift, and go to state 113
    INT        shift, and go to state 44
    FLOAT      shift, and go to state 9
    LP         shift, and go to state 114
    RP         shift, and go to state 221
    LB         shift, and go to state 71
    RETURN     shift, and go to state 115
    BREAK      shift, and go to state 116
    CONTINUE   shift, and go to state 117
    INT_VALUE  shift, and go to state 31
    FLOAT_VAL  shift, and go to state 32
    ID         shift, and go to state 72

    var_dclr     go to state 118
    type         go to state 119
    stmt         go to state 120
    return_stmt  go to state 121
    expr         go to state 122
    log_expr     go to state 74
    and_expr     go to state 75
    factor       go to state 76
    rel_expr     go to state 77
    arith_expr   go to state 78
    expr1        go to state 35
    term         go to state 36
    const        go to state 37
    func_call    go to state 38


State 219

   40 stmt_list: stmt_list . stmt
   60 stmt: FOR LB expr SEMICOL $@18 log_expr SEMICOL $@19 expr RB LP $@20 stmt_list . RP

    SWITCH     shift, and go to state 110
    IF         shift, and go to state 111
    FOR        shift, and go to state 112
    WHILE      shift, and go to state 113
    INT        shift, and go to state 44
    FLOAT      shift, and go to state 9
    LP         shift, and go to state 114
    RP         shift, and go to state 222
    LB         shift, and go to state 71
    RETURN     shift, and go to state 115
    BREAK      shift, and go to state 116
    CONTINUE   shift, and go to state 117
    INT_VALUE  shift, and go to state 31
    FLOAT_VAL  shift, and go to state 32
    ID         shift, and go to state 72

    var_dclr     go to state 118
    type         go to state 119
    stmt         go to state 120
    return_stmt  go to state 121
    expr         go to state 122
    log_expr     go to state 74
    and_expr     go to state 75
    factor       go to state 76
    rel_expr     go to state 77
    arith_expr   go to state 78
    expr1        go to state 35
    term         go to state 36
    const        go to state 37
    func_call    go to state 38


State 220

   40 stmt_list: stmt_list . stmt
   72 case_stmt: case_stmt $@26 CASE INT_VALUE $@27 COLON stmt_list .

    SWITCH     shift, and go to state 110
    IF         shift, and go to state 111
    FOR        shift, and go to state 112
    WHILE      shift, and go to state 113
    INT        shift, and go to state 44
    FLOAT      shift, and go to state 9
    LP         shift, and go to state 114
    LB         shift, and go to state 71
    RETURN     shift, and go to state 115
    BREAK      shift, and go to state 116
    CONTINUE   shift, and go to state 117
    INT_VALUE  shift, and go to state 31
    FLOAT_VAL  shift, and go to state 32
    ID         shift, and go to state 72

    $default  reduce using rule 72 (case_stmt)

    var_dclr     go to state 118
    type         go to state 119
    stmt         go to state 120
    return_stmt  go to state 121
    expr         go to state 122
    log_expr     go to state 74
    and_expr     go to state 75
    factor       go to state 76
    rel_expr     go to state 77
    arith_expr   go to state 78
    expr1        go to state 35
    term         go to state 36
    const        go to state 37
    func_call    go to state 38


State 221

   68 else_stmt: ELSE LP $@25 stmt_list RP .

    $default  reduce using rule 68 (else_stmt)


State 222

   60 stmt: FOR LB expr SEMICOL $@18 log_expr SEMICOL $@19 expr RB LP $@20 stmt_list RP .

    $default  reduce using rule 60 (stmt)
